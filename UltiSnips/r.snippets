global !p
re_word = re.compile(r'\s+((?:[^\s\\]|\\\\|\\\s)+)')
re_quote = re.compile(r'\s+((["\'])([^\2]+)\2|[^"\'\s]+)')
re_map = re.compile(r';([^;]+)')
endglobal

snippet head "Rscript Header" b
box::use(
	magrittr[\`%>%\`, \`%<>%\`, \`%T>%\`],
	stringr,
	data.table[\`:=\`]
)
$0
endsnippet

snippet '/((?:[^\s:\\]|\\\\|\\\s)+)((\s+(?:[^\s:\\]|\\\\|\\\s)+)*)/'  "perl style string vector" r
(`!p snip.rv = '"' + re.compile(r'\\([\s\\])').sub(r'\1', match.group(1)) + \
'"' + re.compile(r'\\([\s\\])').sub(r'\1', re_word.sub(r', "\1"', match.group(2)))`)$0
endsnippet

snippet '\b([A-Za-z_][A-Za-z0-9._]*)<([^\s]+)' "Simple function with one string augument" r
`!p
snip.rv = match.group(1) + "(\"" + match.group(2) + "\")"
`$0
endsnippet

snippet '^tab (\w+(?: \w+)*)\s*(?:\sif (.+))?$' "stata style tab" r
${1:.data}[`!p
con = match.group(2) if match.group(2) is not None else ""
snip.rv = con + ", .N, keyby = .(" + \
re.compile("\s+").sub(", ", match.group(1)) + ")"
`]$0
endsnippet

snippet '^sum (\w+(?:\s+\w+)*)\s*(?:\sif (.+))?$' "stata style sum" r
lbs::stsum(${1:lbs}`!p
con = "[" + match.group(2) + "], "if match.group(2) is not None else ", "
var = re.compile("(\w+)").sub(r'"\1"', match.group(1))
var = re.compile("\s+").sub(', ', var)
snip.rv = con + "c(" + var + ")"
`)
endsnippet

snippet ':([-\w.+*$]+)(?:([<>=])([^/>;]+)?)?' "Raku Style Params" r
`!p
m = re.match(r'^(\-?\d[\d.]*L?|\-|\.|\+|\*|\$)([A-Za-z_].*)', match.group(1))
if m :
	augument = m.group(2)
	if m.group(1) == "+" :
		params = "TRUE"
	elif m.group(1) == "-" :
		params = "FALSE"
	elif m.group(1) == "." :
		params = "NA"
	elif m.group(1) == "*" :
		params = "NULL"
	elif m.group(1) == "$" :
		params = augument
	elif m.group(1) == "00" :
		params = "NULL"
	else :
		params = m.group(1)
else :
	augument = match.group(1)
	if match.group(2) is None :
		params = "TRUE"
	elif match.group(2) == ">" :
		params = match.group(3) + ";" if match.group(3) is not None else "list;"
	elif match.group(2) == "=" :
		params = match.group(3).split()
		params = "c(" + ", ".join(params) + ")" if len(params) != 1 else params[0]
	elif match.group(2) == "<" :
		length = len(match.group(3).split())
		params = re.compile("(\w+)").sub(r'"\1"', match.group(3))
		params = re.compile("\s+").sub(', ', params)
		params = "c(" + params + ")" if length != 1 else params
snip.rv = augument + " = " + params
`$0
endsnippet

snippet ';([^;]+)((?:;[^;]+)*);' "R list" r
(`!p snip.rv = match.group(1) + re_map.sub(r', \1', match.group(2))`)$0
endsnippet

#snippet '([\w.]+)=(\w+)' "map" r
#`!p snip.rv = match.group(1) + " = " + '"' + match.group(2) + '"'`$0
#endsnippet

snippet '\b(my|tmp|ENV|G)\s+([\w.]+)' "Perl Style my statement" r
`!p snip.rv = match.group(1) + "$" + match.group(2) + " "`$0
endsnippet

snippet local "local function" w
local({
	$1
})
$0
endsnippet

snippet showtext "font setting" b
library("showtext")
showtext_auto() 
font_add("Noto Serif CJK SC", "NotoSerifCJK-Regular.ttc")
endsnippet

snippet '# vim' "Description" b
# vim: set tw=0 nowrap fdm=marker
endsnippet


snippet '@(\w+(?:\,\w+)*)' "Externally callable function" br
`!p 
keywords = match.group(1).split(",")
funname = keywords[0]
params = "\n#' @param ".join(keywords[1:])
augument = ", ".join(keywords[1:])
snip.rv = "# " + funname
`
#' ${1:Description}
#'
`!p snip.rv = "#' @param " + params`
#' @return ${2:NULL}
#'
#' @example
#' NULL
#' @export
`!p snip.rv = funname + " <- function(" + augument + ")"`
{
	$0
}
endsnippet


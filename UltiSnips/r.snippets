global !p
re_word = re.compile(r'\s+((?:[^\s\\]|\\\\|\\\s)+)')
re_quote = re.compile(r'\s+((["\'])([^\2]+)\2|[^"\'\s]+)')
re_map = re.compile(r';([^;]+)')
endglobal

snippet head "Rscript Header" b
library("magrittr")
library("stringr")
library("data.table")
my <- new.env(parent = emptyenv())
endsnippet

snippet '"c'  "Change string to string vector" r
" %>%
	str_trim() %>% str_split("\\\\s+") %>% flatten_chr()
$0
endsnippet

snippet ':((?:[^\s:\\]|\\\\|\\\s)+)((\s+(?:[^\s:\\]|\\\\|\\\s)+)*)'  "perl style string vector" r
(`!p snip.rv = '"' + re.compile(r'\\([\s\\])').sub(r'\1', match.group(1)) + \
'"' + re.compile(r'\\([\s\\])').sub(r'\1', re_word.sub(r', "\1"', match.group(2)))`)$0
endsnippet

#snippet ';((["\'])[^\2]+\2|[^"\'\s]+)((?:\s+(?:(["\'])[^\4]+\4|[^"\'\s]+))*)'  "R vector" r
#(`!p snip.rv = match.group(1) + re_quote.sub(r', \1', match.group(3))`)$0
#endsnippet

snippet ';([^;]+)((?:;[^;]+)*)' "R list" r
(`!p snip.rv = match.group(1) + re_map.sub(r', \1', match.group(2))`)$0
endsnippet

snippet '([\w.]+)=(.*)' "map" r
`!p snip.rv = match.group(1) + " = " + '"' + match.group(2) + '"'`$0
endsnippet

snippet '\b(my|tmp|ENV|G)\s+([\w.]+)' "Perl Style my statement" r
`!p snip.rv = match.group(1) + "$" + match.group(2) + " "`$0
endsnippet

snippet local "local function" w
local({
	$1
})
$0
endsnippet

snippet showtext "font setting" b
library("showtext")
showtext_auto() 
font_add("Noto Serif CJK SC", "NotoSerifCJK-Regular.ttc")
endsnippet


